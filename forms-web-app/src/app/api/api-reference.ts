//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

export interface IExamsClient {
    get(id: number): Observable<GetExamResponse>;
    getExams(): Observable<Exam[]>;
}

@Injectable({
    providedIn: 'root'
})
export class ExamsClient implements IExamsClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "https://localhost:7287";
    }

    get(id: number): Observable<GetExamResponse> {
        let url_ = this.baseUrl + "/api/Exams/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<GetExamResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<GetExamResponse>;
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<GetExamResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetExamResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getExams(): Observable<Exam[]> {
        let url_ = this.baseUrl + "/api/Exams";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetExams(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetExams(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Exam[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Exam[]>;
        }));
    }

    protected processGetExams(response: HttpResponseBase): Observable<Exam[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Exam.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface IQuestionsClient {
    getQuestionsForExam(examId: number | undefined): Observable<QuestionDto[]>;
    getQuestionDetails(questionId: number): Observable<QuestionDto>;
}

@Injectable({
    providedIn: 'root'
})
export class QuestionsClient implements IQuestionsClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "https://localhost:7287";
    }

    getQuestionsForExam(examId: number | undefined): Observable<QuestionDto[]> {
        let url_ = this.baseUrl + "/api/Questions?";
        if (examId === null)
            throw new Error("The parameter 'examId' cannot be null.");
        else if (examId !== undefined)
            url_ += "examId=" + encodeURIComponent("" + examId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetQuestionsForExam(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetQuestionsForExam(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<QuestionDto[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<QuestionDto[]>;
        }));
    }

    protected processGetQuestionsForExam(response: HttpResponseBase): Observable<QuestionDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(QuestionDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getQuestionDetails(questionId: number): Observable<QuestionDto> {
        let url_ = this.baseUrl + "/api/Questions/{questionId}";
        if (questionId === undefined || questionId === null)
            throw new Error("The parameter 'questionId' must be defined.");
        url_ = url_.replace("{questionId}", encodeURIComponent("" + questionId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetQuestionDetails(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetQuestionDetails(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<QuestionDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<QuestionDto>;
        }));
    }

    protected processGetQuestionDetails(response: HttpResponseBase): Observable<QuestionDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = QuestionDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export class GetExamResponse implements IGetExamResponse {
    id?: number;
    questions?: GetExamQuestionResponse[];

    constructor(data?: IGetExamResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            if (Array.isArray(_data["questions"])) {
                this.questions = [] as any;
                for (let item of _data["questions"])
                    this.questions!.push(GetExamQuestionResponse.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetExamResponse {
        data = typeof data === 'object' ? data : {};
        let result = new GetExamResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        if (Array.isArray(this.questions)) {
            data["questions"] = [];
            for (let item of this.questions)
                data["questions"].push(item.toJSON());
        }
        return data;
    }
}

export interface IGetExamResponse {
    id?: number;
    questions?: GetExamQuestionResponse[];
}

export class GetExamQuestionResponse implements IGetExamQuestionResponse {
    id?: number;
    title?: string;
    category?: CategoryType;
    type?: AnswerType;
    score?: number;
    answers?: GetExamAnswerResponse[];

    constructor(data?: IGetExamQuestionResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.title = _data["title"];
            this.category = _data["category"];
            this.type = _data["type"];
            this.score = _data["score"];
            if (Array.isArray(_data["answers"])) {
                this.answers = [] as any;
                for (let item of _data["answers"])
                    this.answers!.push(GetExamAnswerResponse.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetExamQuestionResponse {
        data = typeof data === 'object' ? data : {};
        let result = new GetExamQuestionResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["title"] = this.title;
        data["category"] = this.category;
        data["type"] = this.type;
        data["score"] = this.score;
        if (Array.isArray(this.answers)) {
            data["answers"] = [];
            for (let item of this.answers)
                data["answers"].push(item.toJSON());
        }
        return data;
    }
}

export interface IGetExamQuestionResponse {
    id?: number;
    title?: string;
    category?: CategoryType;
    type?: AnswerType;
    score?: number;
    answers?: GetExamAnswerResponse[];
}

export enum CategoryType {
    DOTNET = 0,
    GIT = 1,
    SQL = 2,
    HTTPS = 3,
    JAVA = 4,
    SCALA = 5,
}

export enum AnswerType {
    RadioButton = 0,
    Checkbox = 1,
}

export class GetExamAnswerResponse implements IGetExamAnswerResponse {
    id?: number;
    answerName?: string;
    isSelected?: boolean;

    constructor(data?: IGetExamAnswerResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.answerName = _data["answerName"];
            this.isSelected = _data["isSelected"];
        }
    }

    static fromJS(data: any): GetExamAnswerResponse {
        data = typeof data === 'object' ? data : {};
        let result = new GetExamAnswerResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["answerName"] = this.answerName;
        data["isSelected"] = this.isSelected;
        return data;
    }
}

export interface IGetExamAnswerResponse {
    id?: number;
    answerName?: string;
    isSelected?: boolean;
}

export abstract class Entity implements IEntity {
    id?: number;

    constructor(data?: IEntity) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): Entity {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'Entity' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        return data;
    }
}

export interface IEntity {
    id?: number;
}

export class Exam extends Entity implements IExam {
    candidateId?: number;
    questions?: Question[];
    maxScore?: number;

    constructor(data?: IExam) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.candidateId = _data["candidateId"];
            if (Array.isArray(_data["questions"])) {
                this.questions = [] as any;
                for (let item of _data["questions"])
                    this.questions!.push(Question.fromJS(item));
            }
            this.maxScore = _data["maxScore"];
        }
    }

    static override fromJS(data: any): Exam {
        data = typeof data === 'object' ? data : {};
        let result = new Exam();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["candidateId"] = this.candidateId;
        if (Array.isArray(this.questions)) {
            data["questions"] = [];
            for (let item of this.questions)
                data["questions"].push(item.toJSON());
        }
        data["maxScore"] = this.maxScore;
        super.toJSON(data);
        return data;
    }
}

export interface IExam extends IEntity {
    candidateId?: number;
    questions?: Question[];
    maxScore?: number;
}

export class Question extends Entity implements IQuestion {
    title?: string;
    category?: CategoryType;
    type?: AnswerType;
    score?: number;
    answers?: Answer[];

    constructor(data?: IQuestion) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.title = _data["title"];
            this.category = _data["category"];
            this.type = _data["type"];
            this.score = _data["score"];
            if (Array.isArray(_data["answers"])) {
                this.answers = [] as any;
                for (let item of _data["answers"])
                    this.answers!.push(Answer.fromJS(item));
            }
        }
    }

    static override fromJS(data: any): Question {
        data = typeof data === 'object' ? data : {};
        let result = new Question();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["title"] = this.title;
        data["category"] = this.category;
        data["type"] = this.type;
        data["score"] = this.score;
        if (Array.isArray(this.answers)) {
            data["answers"] = [];
            for (let item of this.answers)
                data["answers"].push(item.toJSON());
        }
        super.toJSON(data);
        return data;
    }
}

export interface IQuestion extends IEntity {
    title?: string;
    category?: CategoryType;
    type?: AnswerType;
    score?: number;
    answers?: Answer[];
}

export class Answer extends Entity implements IAnswer {
    questionId?: number;
    answerName?: string;
    isSelected?: boolean;

    constructor(data?: IAnswer) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.questionId = _data["questionId"];
            this.answerName = _data["answerName"];
            this.isSelected = _data["isSelected"];
        }
    }

    static override fromJS(data: any): Answer {
        data = typeof data === 'object' ? data : {};
        let result = new Answer();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["questionId"] = this.questionId;
        data["answerName"] = this.answerName;
        data["isSelected"] = this.isSelected;
        super.toJSON(data);
        return data;
    }
}

export interface IAnswer extends IEntity {
    questionId?: number;
    answerName?: string;
    isSelected?: boolean;
}

export class QuestionDto implements IQuestionDto {
    id?: number;
    title?: string;
    category?: CategoryType;
    type?: AnswerType;
    score?: number;
    answers?: AnswerDto[];

    constructor(data?: IQuestionDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.title = _data["title"];
            this.category = _data["category"];
            this.type = _data["type"];
            this.score = _data["score"];
            if (Array.isArray(_data["answers"])) {
                this.answers = [] as any;
                for (let item of _data["answers"])
                    this.answers!.push(AnswerDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): QuestionDto {
        data = typeof data === 'object' ? data : {};
        let result = new QuestionDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["title"] = this.title;
        data["category"] = this.category;
        data["type"] = this.type;
        data["score"] = this.score;
        if (Array.isArray(this.answers)) {
            data["answers"] = [];
            for (let item of this.answers)
                data["answers"].push(item.toJSON());
        }
        return data;
    }
}

export interface IQuestionDto {
    id?: number;
    title?: string;
    category?: CategoryType;
    type?: AnswerType;
    score?: number;
    answers?: AnswerDto[];
}

export class AnswerDto implements IAnswerDto {
    id?: number;
    answerName?: string;
    isSelected?: boolean;

    constructor(data?: IAnswerDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.answerName = _data["answerName"];
            this.isSelected = _data["isSelected"];
        }
    }

    static fromJS(data: any): AnswerDto {
        data = typeof data === 'object' ? data : {};
        let result = new AnswerDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["answerName"] = this.answerName;
        data["isSelected"] = this.isSelected;
        return data;
    }
}

export interface IAnswerDto {
    id?: number;
    answerName?: string;
    isSelected?: boolean;
}

export class ApiException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((event.target as any).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}